#!/bin/bash
################################################################################
# OpenERP-inator, a tool to manage OpenERP server instances
# Author: Daniel Reis, 2013
#
################################################################################

#fixed parameters:
OEADMIN_VERSION="0.4-RC2(wip)"
OEADMIN_USER="`whoami`"

# --at command allows to force a the home directory
# WARNING: for internal use; not part of the public interface
OEADMIN_HOME="$(cd `dirname $0` && pwd)"
if [ "$1" = "--at" ] ; then
    OEADMIN_HOME="`echo $2 | sed 's/\/$//'`"  # remove trailing slash
    shift 2
fi 


color='\e[1;34m'
endColor='\e[0m'


case "$1" in

--help)
    echo "usage: oetor <command> [<args>]
OpenERP-inator, a tool to manage and test multiple OpenERP server instances.

<fluff> Dominate the entire ERP tri-state area by easilly installing and 
creating an army of OpenERP server instances in your server.</fluff>

For an easy and quick start use:              ./oetor quickstart
To get more help on a specific command type:  ./oetor <command> --help
For the latest code and documentation see:    https://github.com/dreispt/oetor
 
Commands available:

  quickstart        Automatic full installation and create an initial OpenERP instance (needs sudo).
  install           Create directory structure and db role for current user (may need sudo).
  get-dependencies  Install system dependencies and PostgreSQL db server (needs sudo).
  fake-smtp         Launch a debug SMTP server printing to stdout (needs sudo).

  get               Retrieve predefined source code sets into shared repository.
  get-src           Retrieve custom defined source code into shared repository.
  update            Update sources with most recent versions.
  version           Display sources versions or revision numbers.

  create            Create an OpenERP instance.


An OpenERP instance is a directory inside oetor's home directory. 
It contains a 'main' subdirectory containing the sources used by it:
server, addons, web and possibly other module directories.
 
It can be started using the 'start' script in the corresponding subdirectory.
Any additional parameters given are passed on to the OpenERP server. 
This can be used to set server options such as '--xmlrpc-port=XXXX' or '--debug'.

The addons path used is automatically calculated by the start script. 
Copying a directory with modules into the subdirectory is all that is needed
to have it added to the server's addons path.
 
"
    ;;


install)
    #--------------------------------------------------
    # Setup directories
    #  - repo stored in $OEADMIN_HOME (/opt/openerp)
    #  - reexecution safe (nothing is done)
    #  - repo is a git clone: `git pull` will get it's latest version
    # NOTE: administrator pivilege needed
    #--------------------------------------------------

    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor install [--virtualenv] [directory]
Create directory structure and db role for current user (may need sudo privilege).
The install destinations is /opt/openerp, unless a specific directory is indicatted.

The currently running oetor script will be copied to the install directory, and 
overwritten in case it already exists. This can be used to update the script in 
the install directory, by repeating the install command on a oetor's newer version.
"
        exit 0
    fi

    # Parsing parameters
    shift 1; OE_DIR="$1"
    if [ "$1" = "--virtualenv" ] ; then
        OE_VIRTUALENV="yes"
        shift 1; OE_DIR="$1"
    else
        OE_VIRTUALENV=""
    fi
    if [ -z "$OE_DIR" ] ; then
        OE_DIR="$OEADMIN_HOME"
    fi
    OE_DIR="`echo $OE_DIR | sed 's/\/$//'`"  # remove trailing slash
    echo "Will install into $OE_DIR for user $OEADMIN_USER"

    # Create user, group and postgres role
    echo -e "* Creating system and database users (sudo needed)..."
    OEADMIN_NAME="`basename $OE_DIR`"
    sudo groupadd "$OEADMIN_NAME" 2>/dev/null \
      &&  echo -e "* Created user group  $OEADMIN_NAME"
    sudo usermod -a -G "$OEADMIN_NAME" "$OEADMIN_USER" 2>/dev/null
    sudo su -c "createuser --createdb --createrole --no-superuser $OEADMIN_USER" postgres 2>/dev/null \
      && echo "* Created database role $OEADMIN_USER"

    # Add installing user to sudoers, to impoersonate group users without passord
    # This allows start scripts can run isolated servers
    if [ -z "`sudo grep -w "^$OEADMIN_USER" /etc/sudoers`" ] ; then
        echo "Adding $OEADMIN_USER to sudoers..."
        sudo cp /etc/sudoers /etc/sudoers.oetor
        sudo chown "$OEADMIN_USER" /etc/sudoers.oetor && sudo chmod u+w /etc/sudoers.oetor
        sudo echo -e "$OEADMIN_USER\tALL=(%$OEADMIN_NAME) NOPASSWD: ALL" >> /etc/sudoers.oetor
        sudo chmod u-w /etc/sudoers.oetor && sudo chown root /etc/sudoers.oetor
        sudo visudo -c -s -q -f /etc/sudoers.oetor && sudo cp /etc/sudoers.oetor /etc/sudoers
    fi

    # Create log directories (not used for now)
    #if [ ! -d /var/log$OE_DIR ] ; then
    #    echo -e "* Creating base log directory /var/log$OE_DIR ..."
    #    sudo mkdir -p /var/log$OE_DIR
    #    sudo chown $OEADMIN_USER:$OEADMIN_USER /var/log$OE_DIR
    #fi

    # Create home directory
    [ ! -d $OE_DIR ] &&  echo -e "* Creating oetor home $OE_DIR for user $OEADMIN_USER ..."
    sudo mkdir -p $OE_DIR/src
    sudo chown -hR $OEADMIN_USER:$OEADMIN_NAME $OE_DIR

    # Install or update home's oetor script
    echo -e "* Installing this oetor script to directory $OE_DIR ..."
    cp "$0" $OE_DIR/oetor
    chmod +x $OE_DIR/oetor
    sudo chown $OEADMIN_USER:$OEADMIN_NAME $OE_DIR/oetor

    # TODO(experimental): Setup shared virtualenv
    if [ ! -z "$OE_VIRTUALENV" ] ; then
        # setup virtualenv
        echo "Creating virtualenv at $OE_DIR/env"
        virtualenv --no-site-packages $OE_DIR/env
        source $OE_DIR/env/bin/activate

        #TODO(low), install: allow to use a package requirement file 
        # install pydot pi packages (requires this specific version)
        easy_install -q pyparsing==1.5.7 
        easy_install -q pydot

        # pychart not on pypi
        pip install -q http://download.gna.org/pychart/PyChart-1.39.tar.gz

        # regular pypi packages
        pip install -q python-dateutil docutils feedparser gdata jinja2 \
            python-ldap pyxslt lxml mako mock python-openid PIL psycopg2 psutil babel \
            reportlab simplejson pytz unittest2 vatnumber \
            vobject pywebdav werkzeug xlwt pyyaml 
        # pip install zsi  # fails... 
    fi
    ;;


get-dep*)
    #--------------------------------------------------
    # Install Postgres and System dependencies
    #  - tested with Ubuntu 12
    # NOTE: administrator pivilege needed
    #--------------------------------------------------
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor get-dependencies
Install system dependencies and PostgreSQL database server (needs sudo).
"
    fi

    echo -e "---- Installing PostgreSQL ----"
    sudo apt-get install postgresql

    echo -e "---- Installing system packages ----"
    yes | sudo apt-get install bzr bzrtools 

    echo -e "---- Installing python packages ----"
    yes | sudo apt-get install python-dateutil python-docutils python-feedparser \
    python-gdata python-jinja2 python-ldap python-libxslt1 python-lxml python-mako \
    python-mock python-openid python-psycopg2 python-psutil python-pybabel \
    python-pychart python-pydot python-pyparsing python-reportlab python-simplejson \
    python-tz python-unittest2 python-vatnumber python-vobject python-webdav \
    python-werkzeug python-xlwt python-yaml python-zsi 
    
    # virtualenv: pypi packages system dependencies 
    yes | sudo apt-get install python-pip python-virtualenv 
    yes | sudo apt-get install python-dev libldap2-dev libsasl2-dev libssl-dev  #python-ldap 
    yes | sudo apt-get install libxml2-dev libxslt1-dev  # lxml 
    yes | sudo apt-get install postgresql-server-dev-all  # psycopg2 
    echo -e "Done." 
    ;; 


get) 
    if [ "$2" = "--help" ] ; then 
        echo "Usage: oetor get <srcname-version> [--update]
Create a shared source code directory, containing a predefined list of sources.

Avaliable options for <srcname>:
  nightly-<version>    OpenERP nightly build
  openerp-<version>    OpenERP official sources from Launchpad
  ocb-<version>        Community backports from Launchpad

If a destination directory already exists, the download is skipped.
To force it to be updated, use the --update option.
"
        exit 0
    fi
    if [ -z "$2" ] ; then
        echo "Usage: oetor get <srcname-version> [--update]"
        exit 0
    fi

    # Get parameters and verify directory does not exist
    shift 1; SRCNAME="$1"
    shift 1; GETMETHOD="$1"
    shift 1; SRCUPDATE="$1"
    SRCREPO="${SRCNAME%-*}"     # "my-project-7.0" -> "my-project")
    SRCVERSION="${SRCNAME##*-}"  # "my-project-7.0" -> "7.0"
    if [ -z "$SRCVERSION" ] ; then
        echo "No source version detected."
        exit 1
    fi; 

    # Handle predefined source sets, using the get-src command
    case "$SRCREPO" in
        nightly)
            $0 --at $OEADMIN_HOME get-src tgz $SRCUPDATE $SRCNAME \
                http://nightly.openerp.com/$SRCVERSION/nightly/src/openerp-$SRCVERSION-latest.tar.gz server
        ;;
                
        openerp,sources)
            $0 --at $OEADMIN_HOME get-src bzr $SRCUPDATE $SRCNAME \
                https://launchpad.net/~openerp/openobject-server/$SRCVERSION server \
                https://launchpad.net/~openerp/openobject-addons/$SRCVERSION addons \
                https://launchpad.net/~openerp/openerp-web/$SRCVERSION web
        ;;
        
       ocb)
            $0 --at $OEADMIN_HOME get-scr bzr $SRCUPDATE $SRCNAME \
                https://launchpad.net/~ocb/ocb-server/$SRCVERSION server \
                https://launchpad.net/~ocb/ocb-addons/$SRCVERSION addons \
                https://launchpad.net/~ocb/ocb-web/$SRCVERSION web
        ;; 

        *)  # if it's not a predefined source, reroute to the get-bzr command
            $0 --at $OEADMIN_HOME get-src bzr $SRCUPDATE $*
        ;;

    esac
    ;;


get-src)
    if [ "$2" = "--help" ] ; then
         echo "Usage: oetor get-src <method> [--update] <srcname> [<url> <dirname>]...
Create a shared source code directory inside the src/ directory, named <srcname>.
Then, using <method>, retrieve each <url> into the subdirectory <dirname>.

Available methods:
  bzr    Use a Bazaar lightweight checkout 
  tgz    Download and extract a .tar.gz file from the url

If src/<srcname> already exists, only missing <dirname>s will be installed.
When using the tgz method, the --update option replaces existing directories
with the downloaded version.
"
        exit 0
    fi
    if [ -z "$4" ] ; then
        echo "Usage: oetor get-src <method> [--update] <srcname> [<url> <dirname>]..."
        exit 0
    fi

    # Get parameters and verify directory does not exist
    shift 1; SRCMETHOD="$1"
    if [ "$2" = "--update" ] ; then
        shift 1; SRCUPDATE="$1"
        if [ ! "$SRCMETHOD" = "tgz" ] ; then
            echo "The --update option is only valid for the tgz method."
            echo " Use the 'update' command instead."
            exit 1 
        fi
    else
        SRCUPDATE=""
    fi
    shift 1; SRCNAME="$1"

    # General case: install the provided NAME URL list of sources
    SRCDIR="$OEADMIN_HOME/src/$SRCNAME"
    mkdir -p "$SRCDIR"
    shift 1

    # Process list of parameters
    while [ "$2" ] ; do
        URL="$1"
        NAME="$2"
        shift 2
            #--------
            case "$SRCMETHOD" in

                bzr)
                    if [ -d "$SRCDIR/$NAME" ] ; then
                       echo "$SRCDIR/$NAME already exists: skipping ..."
                    else 
                        echo -e "${color}Building '$SRCDIR/$NAME' with checkout from $URL ...${endColor}"
                        rm -rf $SRCDIR/~tmp
                        bzr checkout --lightweight $URL $SRCDIR/~tmp
                        mv $SRCDIR/~tmp $SRCDIR/$NAME
                    fi 
                    ;;

                tgz)
                    echo -e "${color}Downloading $URL ...${endColor}"
                    # Download file
                    [ "$SRCUPDATE" = "--update" ] && rm $SRCDIR/$NAME.tar.gz 
                    wget --no-clobber -O $SRCDIR/$NAME.tar.gz $URL 
                    if [ ! $? = 0 ] ; then
                        exit 1
                    else
                        # Extract file to temporary directory
                        echo "Extracting downlaod to $SRCDIR/$NAME ..."
                        rm -rf $SRCDIR/~tmp
                        mkdir -p $SRCDIR/~tmp
                        tar xf $SRCDIR/$NAME.tar.gz --directory=$SRCDIR/~tmp
                        # Copy extracted files to named destination
                        mkdir -p $SRCDIR/$NAME
                        [ "$SRCUPDATE" = "--update" ] && rm -rf $SRCDIR/$NAME/*
                        mv $SRCDIR/~tmp/`ls $SRCDIR/~tmp/`/* $SRCDIR/$NAME
                        rm -rf $SRCDIR/~tmp
                    fi
                    ;;

                *)
                    echo "$SRCMETHOD is invalid."
                    exit 1
                    ;;
            esac
            #--------
    done    
    ;;


update)
    if [ -z "$2" ] ; then
        echo "Usage: oetor update <fullpath1/> [<fullpath2/> ...]" 
        exit 0
    fi
            
    shift 1
    while [ "$1" ] ; 
    do
        REPODIR="`echo $1 | sed 's/\/$//'`"  # removes trailing slash
        if [ ! -d "$REPODIR" ] ; then
            echo "WARNING: $REPODIR not found."
        else
           for DIRNAME in `ls -d "$REPODIR"/*/` ; do
               if [ -d "$DIRNAME".bzr ] ; then
                  echo -e "Updating $DIRNAME..."
                  bzr update "$DIRNAME"
               else
                  echo -e "(skipping $DIRNAME)"
               fi 
           done
        fi
        shift 1
    done
    ;;


version)
    if [ -z "$2" ] ; then
        echo "oetor version: $OEADMIN_VERSION"
        echo "oetor home: $OEADMIN_HOME"
        echo "Usage: oetor version <fullpath1/> [<fullpath2/> ...]" 
        exit 0
    fi
            
    shift 1
    while [ "$1" ] ; do 
        REPODIR="`echo $1 | sed 's/\/$//'`"  # remove trailing slash
        if [ ! -d "$REPODIR" ] ; then
            echo "WARNING: $REPODIR not found."
        else
            echo -e "Source revision numbers for $REPODIR:"
            for DIRNAME in `ls -d "$REPODIR"/*/` ; do
                if [ -f "$DIRNAME/PKG-INFO" ] ; then
                    # nightly build
                    grep "^Version" "$DIRNAME/PKG-INFO"
                else
                    echo -en "`basename "$DIRNAME"`\t"
                    bzr revno -q "$DIRNAME"
                fi
            done
        fi
        shift 1
    done
    ;;


fake-smtp)
    sudo python -m smtpd -n -c DebuggingServer localhost:25
    ;;


create)
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor create <instance> <src-fullpath> [PORT] [FIXED_PARAMS]"
        echo "Create an OpenERP instance.
    <instance>  is the identifying name for the instance
    <src>       is the directory name ('nightly-7.0') or full path ('/opt/openerp/src/nightly-7.0')
                to get the instance's server and addons source code.
                Use --no-src if none is to be used.
    [PORT]      optional port number for the instance, defaulting to 8069
    [PARAMS]    list of additional server parameters to include in it's start script
";      exit 0
    fi
    # Check minimun parameters supplied
    if [ -z "$3" ] ; then
        echo "Usage: oetor create <instance> <src-fullpath> [PORT] [FIXED_PARAMS]"
        exit 0
    fi

    # Get version and instance name
    shift 1
    INSTANCE="$1"

    # Get optional branch    
    BRANCHNAME="main"

    # Base directory
    shift 1
    OEBASE="`echo $1 | sed 's/\/$//'`"  # remove trailing slash
    if [ "$OEBASE" = "--no-src" ] ; then
        OEBASE=""
    else
        if [ -d "$OEADMIN_HOME/src/$OEBASE" ] ; then
            OEBASE="$OEADMIN_HOME/src/$OEBASE/"
        else
            if [ -d "`pwd`/$OEBASE" ] ; then
                OEBASE="`pwd`/$OEBASE"
            else
                if [ ! -d "$OEBASE" ] ; then
                    echo "STOPPING: source $OEBASE does not exist."
                    exit 1
                fi
            fi
        fi
        echo "Will use sources at $OEBASE"
    fi

    # Get optional port number    
    shift 1
    PORT="$1"
    if [ -z "$PORT" ] ; then
        PORT=8069
    fi
    
    #--------------------------------------------------
    # - create instance
    #--------------------------------------------------

    OE_DIR="$OEADMIN_HOME/$INSTANCE"
    
    # Create user
    echo "Creating system and database user $INSTANCE (sudo needed)"
    OE_GROUP="`basename $OEADMIN_HOME`"
    sudo useradd -g "$OE_GROUP" -d "$OE_DIR" "$INSTANCE" #2>/dev/null
    sudo -u $OEADMIN_USER createuser --createdb --no-createrole --no-superuser "$INSTANCE" #2>/dev/null

    # Create instance directory
    [ ! -d "$OE_DIR/$BRANCHNAME" ] && echo "* Creating instance directory (sudo needed to change owner)..."
    mkdir -p "$OE_DIR/$BRANCHNAME"
    sudo chown -hR "$INSTANCE" "$OE_DIR"

    # Add virtualenv, if available
    [ -d "$OEADMIN_HOME/env" ] && [ ! -d "$OE_DIR/$BRANCHNAME"/env ] && ln -s $OEADMIN_HOME/env $OE_DIR/$BRANCHNAME/env

    # Create symlink to server source
    if [ ! -z "$OEBASE" ] ; then
        if [ ! -d "$OEBASE" ] ; then
            echo "WARNING: $OEBASE not found."
            exit 1
        else
            echo "* Linking sources ..."
            # for DIRNAME in `cd $OEBASE && ls -d ./*/` ; do
            for DIRNAME in `ls -d "$OEBASE"/*/` ; do
                if [ ! -d "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`" ] ; then
                   if [ "`basename $DIRNAME`" = "web" ] ; then
                       echo -e "  $DIRNAME"addons #-> "$OE_DIR"/"$BRANCHNAME"/"$DIRNAME"
                       ln -s "$DIRNAME"addons "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`"
                   else
                       echo -e "  $DIRNAME" #-> "$OE_DIR"/"$BRANCHNAME"/"$DIRNAME"
                       ln -s "$DIRNAME" "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`"
                   fi
                fi
           done
        fi
    fi

    #--------------------------------------------------
    # - create config
    #--------------------------------------------------
    if [ ! -f "$OE_DIR/openerp-server.conf" ] ; then
        echo "* Creating instance config file ..."
        #TODO(low): better conf file
        echo "[options]
; This is the password that allows database operations:
; admin_passwd = admin
db_user = $INSTANCE
db_name = $BRANCHNAME-$INSTANCE
netrpc = False
xmlrpcs = False
log_handler = ['werkzeug:CRITICAL']
" > $OE_DIR/openerp-server.conf
    fi
    
    shift 1
    
    # TODO: create - add create database to start script
    if [ ! -f "$OE_DIR/$BRANCHNAME/start" ] ; then
        echo "#!/bin/bash
# Generated by oetor $OEADMIN_VERSION
# Preparing server parameters
INSTANCEPATH=\$(cd \`dirname \$0\` && pwd) 
SERVERPATH=\"\$INSTANCEPATH/server/openerp-server\"
BRANCHNAME=\"\`basename \$INSTANCEPATH\`\"
INSTANCENAME=\"\`basename \$(dirname \$INSTANCEPATH)\`\"
DBNAME=\"\$INSTANCENAME\"-\"\$BRANCHNAME\"
OEPORT="$PORT" ; [ ! -z \$1 ] && [[ ! \$1 == -* ]] && OEPORT=\$1 && shift 1 
ADDONSPATH=\"\`ls -d1 \$INSTANCEPATH/*/ | grep -v '/server/$' | grep -v '/env/$' | awk -vORS=, '{print \$1}' | sed 's/\/,/,/g'\`\$INSTANCEPATH/server/openerp/addons\"

# Preparing server database and environment
sudo -u "\$INSTANCENAME" createdb \"\$DBNAME\" 2>/dev/null || echo \"Created database \$DBNAME\"
[ -d \$INSTANCEPATH/env/bin ] && source \$INSTANCEPATH/env/bin/activate

# Starting server
sudo -u "\$INSTANCENAME" \$SERVERPATH --xmlrpc-port=\"\$OEPORT\" -d \"\$DBNAME\" --config=\"\$INSTANCEPATH\"/../openerp-server.conf --addons-path=\"\$ADDONSPATH\" $* \$*
" > "$OE_DIR/$BRANCHNAME/start"
        chmod ug+x "$OE_DIR/$BRANCHNAME/start"
    fi

    #--------------------------------------------------
    # - DONE with instance
    #--------------------------------------------------
    echo "
Instance \"$INSTANCE\" created configured for port $PORT.
To start it type: $OE_DIR/$BRANCHNAME/start
To use it browse: http://`hostname`:$PORT
"
   ;;


install-all)
    #--------------------------------------------------
    if [ -z "$2" ] ; then
        echo "usage: oetor install-all <path-to-addonsdir> [<server-params>...]
Install all modules ins the specified modules directory.

CAVEAT: if the addonsdir was added after the dababase has been initialized, the
server might not know about the new modules yet and report that they are not found.
A solution is to update the module list from the webclient. 
"
        exit 0
    fi
    #--------------------------------------------------
 
    # Get parameters
    shift
    ADDONSPATH="$(cd $1 && pwd)" 
    BRANCHPATH="`dirname $ADDONSPATH`" 
   
    echo -e "Contents for $ADDONSPATH:"
    ls "$ADDONSPATH"
    
    # Init modules
    MODULES="`ls -d1 $ADDONSPATH/*/ | xargs -I file basename file | tr '\n' ','`"
    MODULES="${MODULES%?}" # remove trailing comma
    echo "Modules to install: $MODULES" 
    shift
    $BRANCHPATH/start --init="$MODULES" --stop-after-init $*
    ;;    


test)
    # TODO: test - add test feature
    echo "NOT IMPLEMENTED"
    exit 1
    # Get parameters
    INSTANCE="$2"
    BRANCH_NAME="$3"
    DBNAME="$BRANCH_NAME-$INSTANCE-TEST"
    dropdb $DBNAME
    createdb $DBNAME
    shift 1 
    $0 start $* -d $DBNAME --test-enable --stop-after-init
    # TODO: test command - fix double params
    ;;


# TODO: branch - add copy/branch feature (?)
remove)
    # TODO: remove - review remove feature
    echo "Sorry, the self-destruct button is currently disabled. To go ahead run:
rm -r $OEADMIN_HOME/INSTANCE
dropdb INSTANCE-VERSION"
    ;;


quickstart)
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor quickstart <installdir>
Installs OpenERP-inator and performs an automatic full installation of an
initial OpenERP instance. Requires sudo privilige to perform the system 
installation steps.
If no specific installation directory is provided, '/opt/openerp' will be used.

Equivalent to:
    ./oetor install
    /opt/openerp/oetor get-dependencies
    /opt/openerp/oetor get-nightly 7.0
    /opt/openerp/oetor create v7 nightly-7.0
"
    fi

    if [ ! -z "$2" ] ; then
        OEADMIN_HOME="`echo $2 | sed 's/\/$//'`"  # remove trailing slash
    fi
 
    $0 --at "$OEADMIN_HOME" install $2
    $0 get-dependencies 
    $0 --at "$OEADMIN_HOME" get nightly-7.0 
    $0 --at "$OEADMIN_HOME" create v7 nightly-7.0
    ;;


*)
    if [ -z "$1" ] ; then
        echo "usage: oetor <command> [<args>]"
    else
        echo "Not a valid command."
    fi
    echo "Type \`oetor --help\` to show all commands available."
    ;;


esac
exit 0
