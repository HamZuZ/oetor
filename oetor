#!/bin/bash
################################################################################
# OpenERP-inator, a tool to manage OpenERP server instances
# Author: Daniel Reis, 2013
#
################################################################################

#fixed parameters:
OEADMIN_VERSION="0.3b"
OEADMIN_USER="`whoami`"
OEADMIN_HOME="/opt/openerp"
#OEVERSION="7.0"
color='\e[1;34m'
endColor='\e[0m'

# Basic usage instruction
if [ -z "$1" ]; then
    echo "usage: oetor <command> [<args>]

The most commonly used commands are:
  help              Show all commands and detailed usage instructions.
  get-dependencies  Install PostgreSQL and OpenERP system dependencies.
  init              Initialize a OpenERP home and it's server sources.
  create            Create an OpenERP server instance.
  start             Start running a server instance.
  test              Create a temporay db and run tests for an instance

Type \`oetor help\` to show all commands available.
Type \`oetor <command>\` (with no argument) to get more help on a command.
"
    exit 0
fi


case "$1" in

--help)
    echo "usage: oetor <command> [<args>]
OpenERP-inator, a tool to manage and test multiple OpenERP server instances.
https://github.com/dreispt/oetor

<fluff> Dominate the entire ERP tri-state area by easilly installing and 
creating an army of OpenERP server instances in your server. Beware of the 
self-destruct button. </fluff>

For an easy and  quick start run: ./oetor auto-install
This will make an automatic full installation, including the creation of an
initial "demo" OpenERP instance. It's equivalent to running the sequence of
commands: get-dependencies; init; get-source; create demo.

Commands available:

  setup-init        Creates db role for current user and the directory
                    structure. Requires sudoer privilege.
  setup-deps        Install system dependencies including the PostgreSQL
                    database. Requires sudoer privilege.
  setup-nightly     Retrieves source code from nightly builds repository, into
                    the 'shared' directory.
  setup-sources     Retrieves source code from Lanchpad repositories, into
                    the 'shared' directory.
  setup-src         Builds the REPONAME shared directory containing a
		    list of projects.
  update-src        Updates the sources with most recent versions.
  version-src       Displays the sources revision numbers.

  create NAME [PORT] [FIXED_OPTIONS]
                    Create an OpenERP 7 database and instance named "NAME" and
                    listening at port "PORT". If additional "FIXED_OPTIONS" are
                    provided, they will be included in the generated 'start'
                    script.
  start OEVERS NAME Starts this server instance.
  test OEVERS NAME  Creates a test database and runs tests for the instance.
  fake-smtp         Launch a test SMTP server on localhost, printing to stdout.

An OpenERP instance is a directory inside oetor's home directory. It can be
started running the `start` script and and includes a `openerp-server.conf`
configuration file used by the instance.

If the `start` script is provided with additional parameters, these will be
passed to the openerp-server.
For example: ./start.sh -u all --stop-after-init

The contained directories are automatically added to the addons_path upon server
start. By default includes symlinks to the official addons sources in the
'shared' directory.
"
    ;;


init)
    #--------------------------------------------------
    # Setup directories
    #  - repo stored in $OEADMIN_HOME (/opt/openerp)
    #  - reexecution safe (nothing is done)
    #  - repo is a git clone: `git pull` will get it's latest version
    #--------------------------------------------------

    if [ ! -d /var/log$OEADMIN_HOME ] ; then
        echo -e "* Creating base log directory /var/log$OEADMIN_HOME ..."
        sudo mkdir -p /var/log$OEADMIN_HOME
        sudo chown $OEADMIN_USER:root /var/log$OEADMIN_HOME
    fi

    if [ ! -d $OEADMIN_HOME ] ; then
        echo -e "* Creating oetor home directory $OEADMIN_HOME ..."
        sudo mkdir -p $OEADMIN_HOME/src
        sudo chown -R $OEADMIN_USER:root $OEADMIN_HOME
    fi
    if [ ! -d $OEADMIN_HOME/src/oetor ] ; then
        echo -e "* Cloning oetor to directory $OEADMIN_HOME/src/oetor ..."
        sudo git clone https://github.com/dreispt/oetor $OEADMIN_HOME/src/oetor
	rm -f $OEADMIN_HOME/oetor
        ln -s $OEADMIN_HOME/src/oetor/oetor $OEADMIN_HOME/oetor
    else
        echo -e "* Getting oetor latest version on directory $OEADMIN_HOME/src/oetor ..."
        git --git-dir=$OEADMIN_HOME/src/oetor pull
    fi
    ;;


setup)
   case $2 in
    
   --help)
        #TODO ...
        echo "Usage of oerot setup:"
        ;;

   dependencies)
        #--------------------------------------------------
        # Install Postgres and System dependencies
        #  - tested with Ubuntu 12
        #--------------------------------------------------
        echo -e "\n---- Installing PostgreSQL ----"
        sudo apt-get install postgresql

        echo -e "\n---- Installing system packages ----"
        yes | sudo apt-get install bzr bzrtools python-pip git

        echo -e "\n---- Installing python packages ----"
        yes | sudo apt-get install python-dateutil python-docutils python-feedparser \
        python-gdata python-jinja2 python-ldap python-libxslt1 python-lxml python-mako \
        python-mock python-openid python-psycopg2 python-psutil python-pybabel \
        python-pychart python-pydot python-pyparsing python-reportlab python-simplejson \
        python-tz python-unittest2 python-vatnumber python-vobject python-webdav \
        python-werkzeug python-xlwt python-yaml python-zsi python-gdata

        #echo -e "\n---- Install python libraries ----"
        #sudo pip install gdata
        echo -e "Dependencies installed."
        ;;

    nightly)
	# TODO: move this to `update`; check if dir does not exist
	# Get parameters
	if [ -z "$3" ] ; then
	    echo "Usage: oetor setup $2 <VERSION>"
	    exit 0
	fi
	ORIGIN="$2"
	OEVERSION="$3"

        if [ -d "$OEADMIN_HOME/src/nightly-$OEVERSION" ] ; then
            echo "Directory $OEADMIN_HOME/src/nightly-$OEVERSION already exists. Use 'update' instead."
            exit 1
        fi

	echo "Retrieving nightly build sources to $OEADMIN_HOME/shared/latest-$OEVERSION:"
	echo -e "${color}* Downloading $OEVERSION nightly build ...${endColor}"
	mkdir -p $OEADMIN_HOME/src
	#wget --no-clobber http://nightly.openerp.com/$OEVERSION/nightly/src/openerp-$OEVERSION-latest.tar.gz -P $OEADMIN_HOME/src

	echo -e "${color}* Uncompressing files ...${endColor}"
	rm -rf $OEADMIN_HOME/src/~tmp
	mkdir -p $OEADMIN_HOME/src/~tmp
	tar xf $OEADMIN_HOME/src/openerp-$OEVERSION-latest.tar.gz --directory=$OEADMIN_HOME/src/~tmp

	echo -e "${color}* Installing shared source files ...${endColor}"
	rm -rf $OEADMIN_HOME/src/nightly-$OEVERSION/*
	mkdir -p $OEADMIN_HOME/src/nightly-$OEVERSION/server
	mv $OEADMIN_HOME/src/~tmp/`ls $OEADMIN_HOME/src/~tmp/`/* $OEADMIN_HOME/src/nightly-$OEVERSION/server
	;;
	
    *)
	# Get parameters and verify directoru does not exist
	ORIGIN="$2"
	OEADMIN_DIR="$OEADMIN_HOME/src/$ORIGIN"

	if [ -z "$3" ] ; then
		echo "Usage: oetor setup $ORIGIN <VERSION>"
		exit 0
	fi

        # Special case: install official sources
        if [ "$ORIGIN" = "sources" ] ; then

	    OEVERSION="$3"
	    $0 setup sources-$OEVERSION server https://launchpad.net/~openerp/openobject-server/$OEVERSION addons https://launchpad.net/~openerp/openobject-addons/$OEVERSION web https://launchpad.net/~openerp/openerp-web/$OEVERSION

	else
	# General case: install the provided NAME URL list of sources
	    mkdir -p "$OEADMIN_HOME/src/$ORIGIN/repos"
            shift 2
	    while [ "$2" ] ; do
               NAME="$1"
               URL="$2"
               shift 2
               # Sources stores inside /repos, except for /server
	       OE_SRC_DIR="$OEADMIN_HOME/src/$ORIGIN"
	       if [ -d "$OE_SRC_DIR/$NAME" ] ; then
                   echo "$OE_SRC_DIR/$NAME already exists: skipping ..."
	       else	

		   echo -e "${color}Building '$OE_SRC_DIR/$NAME' with checkout from $URL ...${endColor}"
		   rm -rf $OE_SRC_DIR/~tmp
		   bzr checkout --lightweight $URL $OE_SRC_DIR/~tmp
		   #if [ "`ls $OE_SRC_DIR/~tmp`" ] ; then
	               echo -e "$NAME ready." 
		       mv $OE_SRC_DIR/~tmp $OE_SRC_DIR/$NAME
		   #fi
	       fi
	    done	
	    echo -e "All sources ready."
	fi
	;;
    
    esac
    ;; 


update)
    #--------------------------------------------------
    # Update the sources downloaded with "get-source"
    #--------------------------------------------------
    if [ -z "$2" ] ; then
        echo "Usage: oetor update <REPO1> [<REPO2> ...]" 
        exit 1
    fi
            
    shift 1
    while [ "$1" ] ; 
    do
	REPODIR="$OEADMIN_HOME/src/$1"
	if [ ! -d "$REPODIR" ] ; then
	    echo "WARNING: $REPODIR does not exist."
	else

	   for DIRNAME in `ls $REPODIR`
	   do
	      echo -e "Updating $REPODIR/$DIRNAME..."
	      bzr update $REPODIR/$DIRNAME
	   done

        fi
        shift 1
    done
    # echo "Sources updated."
    ;;


version)
    if [ -z "$2" ] ; then
	echo "oetor version: $OEADMIN_VERSION"
	echo "oetor home: $OEADMIN_HOME"
        echo "Usage: oetor update <REPO1> [<REPO2> ...]" 
        exit 0
    fi
            
    shift 1
    while [ "$1" ] ; 
    do
	REPODIR="$OEADMIN_HOME/src/$1"
	if [ ! -d "$REPODIR" ] ; then
	    echo "WARNING: $REPODIR does not exist."
	else
	    echo -e "Source revision numbers for $REPODIR:"
            for DIRNAME in `ls $REPODIR`
	    do
		echo -en "$DIRNAME\t"
		bzr revno -q $REPODIR/$DIRNAME
	    done
        fi
        shift 1
    done
    ;;


fake-smtp)
    sudo python -m smtpd -n -c DebuggingServer localhost:25
    ;;


create-add)
    #--------------------------------------------------
    # Create a new server Instance and setup a Branch
    # It's meant to be used through `create` and `branch`, but can also be used directly
    #--------------------------------------------------

    # Check minimun parameters supplied
    if [ -z "$4" ] ; then
        echo "Usage:
oetor create-add <INSTANCE> <BRANCHNAME> <MPURL> <BASEDIR> [PORT] [FIXED_PARAMS]
oetor create-add <INSTANCE> --no-branch <BASEDIR> [PORT] [FIXED_PARAMS]"
        exit 0
    fi

    # Get version and instance name
    INSTANCE="$2"

    # Get optional branch    
    if [ "$3" = "--no-branch" ] ; then
        BRANCHNAME=""
        MPURL=""
        shift 1
    else
        BRANCHNAME="$3"
        MPURL="$4"
        shift 2
    fi

    # Base directory
    OEBASE="$3"
    if [ "$3" = "--no-base" ] ; then
        OEBASE=""
    fi
    if [ ! -d "$OEADMIN_HOME/src/$OEBASE" ] ; then
        echo "STOPPING: HOME/src/$OEBASE does not exist."
        exit 1
    fi

    # Get optional port number    
    if [ -z "$4" ] ; then
        PORT=8069
    else
        PORT="$4"
        shift 1
    fi
    
    #--------------------------------------------------
    # - create instance
    #--------------------------------------------------

    # Create psql role if missing
    if [ -z `psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$OEADMIN_USER'"` ] ; then
        echo -e "* Creating database role $OEADMIN_USER ..."
        sudo su -c "createuser --createdb --no-createrole --no-superuser $OEADMIN_USER" postgres
    fi

    OEADMIN_DIR="$OEADMIN_HOME/$INSTANCE"
    
    # Create instance directory
    if [ ! -d "$OEADMIN_DIR/common" ] ; then
        echo "* Creating instance directory ..."
        mkdir -p "$OEADMIN_DIR/common"
    fi

    # Create symlink to server source
    if [ ! -z "$OEBASE" ] ; then
        if [ ! -d "$OEADMIN_DIR/src" ] ; then
            echo "* Linking to server ..."
            ln -s "$OEADMIN_HOME/src/$OEBASE" "$OEADMIN_DIR/src"
        fi
    fi

    #create database
    if [ ! `psql $INSTANCE -tc "select 1" 2>/dev/null` ] ; then
        echo "* Creating instance database $INSTANCE ..."
        createdb "$INSTANCE"
    fi

    #--------------------------------------------------
    # - create config
    #--------------------------------------------------

    if [ ! -f "$OEADMIN_DIR/openerp-server.conf" ] ; then
        echo "* Creating instance config file ..."
        #TODO: better conf file (?)
        echo "[options]
; This is the password that allows database operations:
; admin_passwd = admin
db_user = $OEADMIN_USER
db_name = $INSTANCE
netrpc = False
xmlrpcs = False
log_handler = ['werkzeug:CRITICAL']
" > $OEADMIN_DIR/openerp-server.conf
    fi
    
    shift 3
    
    if [ ! -f "$OEADMIN_DIR/normbot" ] ; then
        echo "
OECMD=\$1
shift 1
$OEADMIN_HOME/oetor \$1 $INSTANCE --no-branch $PORT \$*" > "$OEADMIN_DIR/normbot"
        chmod ug+x "$OEADMIN_DIR/normbot"
    fi

    #--------------------------------------------------
    # - DONE with instance
    #--------------------------------------------------
    echo "
Instance \"$INSTANCE\" created configured for port $PORT.
To start it type: $OEADMIN_DIR/normbot start
To use it browse: http://`hostname`:$PORT
"

    #--------------------------------------------------
    # - create branch
    #--------------------------------------------------
    if [ "$MPURL" ] ; then

        # Get MP sources
        if [ ! -d "$OEADMIN_DIR/$BRANCH_NAME" ] ; then
            echo "* Retrieving branch ..."
            bzr branch "$MPURL" "$OEADMIN_DIR/$BRANCH_NAME"
        fi
        
        # create non existing database    
        if [ ! `psql $BRANCH_NAME-$INSTANCE -c "select 1"` == 0 ] ; then
            echo "* Creating database $BRANCH_NAME-$INSTANCE ..."
            createdb "$BRANCH_NAME-$INSTANCE"
        fi

        # create norm script
        if [ ! -f "$OEADMIN_DIR/normbot-$BRANCH_NAME" ] ; then
            echo "$OEADMIN_HOME/oetor start $INSTANCE $BRANCH_NAME $PORT $*" > $OEADMIN_DIR/normbot-$BRANCH_NAME
            chmod ug+x "$OEADMIN_DIR/$INSTANCE/normbot-$BRANCH_NAME"
        fi

        #--------------------------------------------------
        # - DONE with branch
        #--------------------------------------------------
        echo "
Branch $BRANCH_NAME ready.
To control it type:  $OEADMIN_DIR/normbot-$BRANCH_NAME
"
    fi
    ;;


create)
    #--------------------------------------------------
    # Create a new instance:
    #   oetor create INSTANCE <BASE> [PORT] [FIXED_PARAMS]
    #--------------------------------------------------

    # Check OpenERP version parameter
    if [ -z "$3" ] ; then
        echo "Usage:   oetor create INSTANCE BASEDIR"
        echo "Example: oetor create myserver latest-7.0"
        exit 0
    else
        # Get parameters
        INSTANCE="$2"
        OEBASE="$3"
        shift 3
        $0 create-add $OEVERSION $INSTANCE --no-branch $OEBASE $*
    fi
    ;;
    
    
addto)
    #--------------------------------------------------
    # Create a new branch inside an instance:
    #--------------------------------------------------

    # Check parameters
    if [ -z "$4" ] ; then
        echo "Usage:   oetor addto INSTANCE BRANCHNAME BRANCHURL [PORT] [FIXED_PARAMS]"
        echo "Example: oetor addto myserver7 myproject lp:myproject/7.0"
        exit 0
    else
        # Get parameters
        INSTANCE="$2"
        BRANCHNAME="$3"
        BRANCHURL="$4"
        shift 4
        $0 create-add $INSTANCE $BRANCHNAME $BRANCHURL --no-base $*
    fi
    ;;
    
    
install-all)
    #--------------------------------------------------
    if [ -z "$4" ] ; then
        echo "usage: oetor install INSTANCE BRANCHNAME"
        echo "Install all modules for an instance branch."
        exit 0
    fi
    #--------------------------------------------------
 
    # Get parameters
    INSTANCE="$2"
    BRANCHNAME="$3"
    
    echo -e "Branch contents:"
    ls "$OEADMIN_HOME/$INSTANCE/$BRANCHNAME"
    
    # Init modules
    echo -e "\nInstalling branch modules ..."
    MODULES="`ls -d1 $OEADMIN_HOME/$INSTANCE/$BRANCHNAME/*/ | xargs -I file basename file | tr '\n' ','`"
    echo "Modules to install: ${MODULES%?}" # remove trailing comma
    $0 start $INSTANCE $BRANCHNAME --init="${MODULES%?}" --stop-after-init
    ;;    


start)
    #--------------------------------------------------
    if [ -z "$3" ] ; then
        echo "usage: oetor start INSTANCE BRANCHNAME [PORT] [PARAMS]"
        echo "Start an OpenERp server."
        exit 0
    fi
    #--------------------------------------------------
 
    # Get parameters
    INSTANCE="$2"
    BRANCH_NAME="$3"
    
    # Get optional port number    
    if [ -z "$4" ] ; then
        PORT=8069
    else
        PORT="$4"
        shift 1
    fi
    
    shift 3
    # TODO: FIX COMMAS FROM EMPTY DIRES
    COMMON="`ls -dm $OEADMIN_HOME/src/repos/*/|tr -d '[:space:]'`"
    ADDONS="`ls -dm $OEADMIN_HOME/$INSTANCE/common/*/|tr -d '[:space:]'`"
    $OEADMIN_HOME/$INSTANCE/base/server/openerp-server --xmlrpc-port=$PORT -d $BRANCH_NAME-$INSTANCE $* --addons-path="$OEADMIN_HOME/$INSTANCE/$BRANCH_NAME,$COMMON,$ADDONS" --config="$OEADMIN_HOME/$INSTANCE/openerp-server.conf" $*
        ;;


test)
    # Get parameters
    INSTANCE="$2"
    BRANCH_NAME="$3"
    DBNAME="$BRANCH_NAME-$INSTANCE-TEST"
    dropdb $DBNAME
    createdb $DBNAME
    shift 1 
    $0 start $* -d $DBNAME --test-enable --stop-after-init
    # TODO: fix double params
    ;;


remove)
    echo "Sorry, the self-destruct button is currently disabled. To go ahead run:
rm -r $OEADMIN_HOME/INSTANCE
dropdb INSTANCE-VERSION"
    ;;


auto-install)
    $0 init
    $0 setup dependencies
    $0 setup sources 7.0
    $0 create server1 sources-7.0
    ;;

esac
