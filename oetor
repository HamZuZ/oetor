#!/bin/bash
################################################################################
# OpenERP-inator, a tool to manage OpenERP server instances
# Author: Daniel Reis, 2013
#
################################################################################

#fixed parameters:
OEADMIN_VERSION="0.4-RC"
OEADMIN_USER="`whoami`"

# --at command allows to firce a the home directory
# WARNING: for internal use; not part of the public interface
OEADMIN_HOME="$(cd `dirname $0` && pwd)"
if [ "$1" = "--at" ] ; then
    OEADMIN_HOME="`echo $2 | sed 's/\/$//'`"  # remove trailing slash
    shift 2
fi 


color='\e[1;34m'
endColor='\e[0m'


case "$1" in

--help)
    echo "usage: oetor <command> [<args>]
OpenERP-inator, a tool to manage and test multiple OpenERP server instances.

<fluff> Dominate the entire ERP tri-state area by easilly installing and 
creating an army of OpenERP server instances in your server.</fluff>

For an easy and quick start use:              ./oetor quickstart
To get more help on a specific command type:  ./oetor <command> --help
For the latest code and documentation see:    https://github.com/dreispt/oetor
 
Commands available:

  quickstart        Automatic full installation and create an initial OpenERP instance (needs sudo).
  install           Create directory structure and db role for current user (may need sudo).
  get-dependencies  Install system dependencies and PostgreSQL db server (needs sudo).
  fake-smtp         Launch a debug SMTP server printing to stdout (needs sudo).

  get-nightly       Retrieve source code from nightly builds repository. 
  get-sources       Retrieve source code from Launchpad official repositories.
  get-ocb           Retrieve source code from Launchpad community backport repositories.
  get               Retrieve source code from custom locations.
  update            Update sources with most recent versions.
  version           Display sources versions or revision numbers.

  create            Create an OpenERP instance.


An OpenERP instance is a directory inside oetor's home directory. 
It contains a 'main' subdirectory containing the sources used by it:
server, addons, web and possibly other module directories.
 
It can be started using the 'start' script in the corresponding subdirectory.
Any additional parameters given are passed on to the OpenERP server. 
This can be used to set server options such as '--xmlrpc-port=XXXX' or '--debug'.

The addons path used is automatically calculated by the start script. 
Copying a directory with modules into the subdirectory is all that is needed
to have it added to the server's addons path.
 
"
    ;;


install)
    #--------------------------------------------------
    # Setup directories
    #  - repo stored in $OEADMIN_HOME (/opt/openerp)
    #  - reexecution safe (nothing is done)
    #  - repo is a git clone: `git pull` will get it's latest version
    # NOTE: administrator pivilege needed
    #--------------------------------------------------

    shift 1
    OE_DIR="$1"
    if [ "$OE_DIR" = "--help" ] ; then
        echo "Usage: oetor install [directory]
Create directory structure and db role for current user (may need sudo privilege).
The install destinations is /opt/openerp, unless a specific directory is indicatted.

The currently running oetor script will be copied to the install directory, and 
overwritten in case it already exists. This can be used to update the script in 
the install directory, by repeating the install command on a oetor's newer version.
"
        exit 0
    fi
    if [ -z "$OE_DIR" ] ; then
        OE_DIR="$OEADMIN_HOME"
    fi
    OEDIR="`echo $OEDIR | sed 's/\/$//'`"  # remove trailing slash
    echo "Will install into $OE_DIR for user $OEADMIN_USER"

    if [ ! -d /var/log$OE_DIR ] ; then
        echo -e "* Creating base log directory /var/log$OE_DIR ..."
        sudo mkdir -p /var/log$OE_DIR
        sudo chown $OEADMIN_USER:root /var/log$OE_DIR
    fi

    if [ ! -d $OE_DIR ] ; then
        echo -e "* Creating oetor home $OE_DIR for user $OEADMIN_USER ..."
        sudo mkdir -p $OE_DIR/src
        sudo chown -R $OEADMIN_USER $OE_DIR
    fi

    echo -e "* Installing this oetor script to directory $OE_DIR ..."
    cp "$0" $OE_DIR/oetor
    chmod +x $OE_DIR/oetor
    chown $OEADMIN_USER $OE_DIR/oetor

    # Create psql role
    sudo su -c "createuser --createdb --no-createrole --no-superuser $OEADMIN_USER" postgres 2>/dev/null \
        && echo "* Created database role $OEADMIN_USER"
    ;;


get-dep*)
    #--------------------------------------------------
    # Install Postgres and System dependencies
    #  - tested with Ubuntu 12
    # NOTE: administrator pivilege needed
    #--------------------------------------------------
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor get-dependencies
Install system dependencies and PostgreSQL database server (needs sudo).
"
    fi

    echo -e "---- Installing PostgreSQL ----"
    sudo apt-get install postgresql

    echo -e "---- Installing system packages ----"
    yes | sudo apt-get install bzr bzrtools python-pip git

    echo -e "---- Installing python packages ----"
    yes | sudo apt-get install python-dateutil python-docutils python-feedparser \
    python-gdata python-jinja2 python-ldap python-libxslt1 python-lxml python-mako \
    python-mock python-openid python-psycopg2 python-psutil python-pybabel \
    python-pychart python-pydot python-pyparsing python-reportlab python-simplejson \
    python-tz python-unittest2 python-vatnumber python-vobject python-webdav \
    python-werkzeug python-xlwt python-yaml python-zsi python-gdata

    #echo -e "\n---- Install python libraries ----"
    #sudo pip install gdata
    echo -e "Done."
    ;;


get)
    if [ -z "$2" ] ; then
        echo "Usage: oetor get <srcname-version>
Create a shared source code directory, containing a predefined list of sources.
These will be placed in the $OEHOME_ADMIN/src/<srcname> directory.

Avaliable options for <srcname>:
  nightly-<version>    OpenERP nightly build
  openerp-<version>    OpenERP official sources from Launchpad
  ocb-<version>        Community backports from Launchpad
"
        exit 0
    fi

    # Get parameters and verify directory does not exist
    shift 1; SRCNAME="$1"
    shift 1; GETMETHOD="$1"
    SRCREPO="${SRCNAME%-*}"     # "my-project-7.0" -> "my-project")
    SRCVERSION="${SRCNAME##*-}"  # "my-project-7.0" -> "7.0"
    if [ -z "$SRCVERSION" ] ; then
        echo "No source version detected."
        exit 1
    fi; 

    # Handle predefined source sets, using the get-src command
    case "$SRCREPO" in
        nightly)
            $0 --at $OEADMIN_HOME get-src tgz $SRCNAME \
                http://nightly.openerp.com/$SRCVERSION/nightly/src/openerp-$SRCVERSION-latest.tar.gz server
        ;;
                
        openerp,sources)
            $0 --at $OEADMIN_HOME get-src bzr $SRCNAME \
                https://launchpad.net/~openerp/openobject-server/$SRCVERSION server \
                https://launchpad.net/~openerp/openobject-addons/$SRCVERSION addons \
                https://launchpad.net/~openerp/openerp-web/$SRCVERSION web
        ;;
        
       ocb)
            $0 --at $OEADMIN_HOME get-scr bzr $SRCNAME \
                https://launchpad.net/~ocb/ocb-server/$SRCVERSION server \
                https://launchpad.net/~ocb/ocb-addons/$SRCVERSION addons \
                https://launchpad.net/~ocb/ocb-web/$SRCVERSION web
        ;; 

        *)  # if it's nor a predefined source, reroute to the get-bzr command
            $0 --at $OEADMIN_HOME get-src bzr $*
        ;;

    esac
    ;;


get-src) ### WIP
    # TODO @ get-src: (WIP) make get commands unified and more consistent.
    if [ -z "$5" ] ; then
         echo "Usage: oetor get-src <method> <srcname> [<url> <dirname>]...
Create a shared source code directory inside the src/ directory, named <srcname>.
Then, using <method>, retrieve each <url> into the subdirectory <dirname>.
If src/<srcname> already exists, only missing <dirname>s will be installed.

Available methods:
  tgz    Download and extract a .tar.gz file from the url
  bzr    Use a Bazaar lightweight checkout 
"
        exit 0
    fi

    # Get parameters and verify directory does not exist
    shift 1; SRCMETHOD="$1"
    shift 1; SRCNAME="$1"

    # General case: install the provided NAME URL list of sources
    SRCDIR="$OEADMIN_HOME/src/$SRCNAME"
    mkdir -p "$SRCDIR"
    shift 1

    # Process list os parameters
    while [ "$2" ] ; do
       URL="$1"
       NAME="$2"
       shift 2
       if [ -d "$SRCDIR/$NAME" ] ; then
           echo "$SRCDIR/$NAME already exists: skipping ..."
       else 
           #--------
           case "$SRCMETHOD" in

                bzr)
                    echo -e "${color}Building '$SRCDIR/$NAME' with checkout from $URL ...${endColor}"
                    rm -rf $SRCDIR/~tmp
                    bzr checkout --lightweight $URL $SRCDIR/~tmp
                    mv $SRCDIR/~tmp $SRCDIR/$NAME
                    ;;

                tgz)
                    echo -e "${color}Building '$SRCDIR/$NAME' with download from $URL ...${endColor}"
                    # Download file
                    wget --no-clobber -O $SRCDIR/$NAME.tar.gz $URL 
                    # Extract file to temporary directory
                    rm -rf $SRCDIR/~tmp
                    mkdir -p $SRCDIR/~tmp
                    tar xf $SRCDIR/$NAME.tar.gz --directory=$SRCDIR/~tmp
                    # Copy extracted files to named destination
                    # TODO: us in "update": rm -rf $SRCDIR/$NAME/*  # symlinks to here are preserved
                    mkdir -p $SRCDIR/$NAME
                    mv $SRCDIR/~tmp/`ls $SRCDIR/~tmp/`/* $SRCDIR/$NAME
                    rm -rf $SRCDIR/~tmp
                    ;;

                *)
                    echo "$SRCMETHOD is invalid."
                    exit 1
                    ;;
            esac
           #--------
       fi
    done    
    ;;


update)
    #--------------------------------------------------
    # Update the sources downloaded with "get-source"
    #--------------------------------------------------
    if [ -z "$2" ] ; then
        echo "Usage: oetor update <fullpath1/> [<fullpath2/> ...]" 
        exit 0
    fi
            
    # TODO: update - allow update of  nightly build src repos
    shift 1
    while [ "$1" ] ; 
    do
        REPODIR="`echo $1 | sed 's/\/$//'`"  # remove trailing slash
        if [ ! -d "$REPODIR" ] ; then
            echo "WARNING: $REPODIR not found."
        else
           for DIRNAME in `ls -d "$REPODIR"/*/` ; do
              echo -e "Updating $DIRNAME..."
              bzr update "$DIRNAME"
           done
        fi
        shift 1
    done
    # echo "Sources updated."
    ;;


version)
    if [ -z "$2" ] ; then
        echo "oetor version: $OEADMIN_VERSION"
        echo "oetor home: $OEADMIN_HOME"
        echo "Usage: oetor version <fullpath1/> [<fullpath2/> ...]" 
        exit 0
    fi
            
    shift 1
    while [ "$1" ] ; do 
        REPODIR="`echo $1 | sed 's/\/$//'`"  # remove trailing slash
        if [ ! -d "$REPODIR" ] ; then
            echo "WARNING: $REPODIR not found."
        else
            echo -e "Source revision numbers for $REPODIR:"
            for DIRNAME in `ls -d "$REPODIR"/*/` ; do
                if [ -f "$DIRNAME/PKG-INFO" ] ; then
                    # nightly build
                    grep "^Version" "$DIRNAME/PKG-INFO"
                else
                    echo -en "`basename "$DIRNAME"`\t"
                    bzr revno -q "$DIRNAME"
                fi
            done
        fi
        shift 1
    done
    ;;


fake-smtp)
    sudo python -m smtpd -n -c DebuggingServer localhost:25
    ;;


create)
    #--------------------------------------------------
    # Create a new server Instance and setup a Branch
    # It's meant to be used through `create` and `branch`, but can also be used directly
    #--------------------------------------------------

    # Check minimun parameters supplied
    if [ -z "$3" ] ; then
        echo "Usage: oetor create <instance> <src-fullpath> [PORT] [FIXED_PARAMS]"
        exit 0
    fi

# TODO: create - add documentation
#  create            Create an OpenERP instance named "NAME" and
#                    listening at port "PORT". If additional "FIXED_OPTIONS" are
#                    provided, they will be included in the generated 'start'
#                    script.
 
    # Get version and instance name
    shift 1
    INSTANCE="$1"

    # Get optional branch    
    BRANCHNAME="main"

    # Base directory
    shift 1
    OEBASE="`echo $1 | sed 's/\/$//'`"  # remove trailing slash
    if [ "$OEBASE" = "--no-src" ] ; then
        # TODO: document the --no-src option
        OEBASE=""
    else
        if [ -d "$OEADMIN_HOME/src/$OEBASE" ] ; then
            OEBASE="$OEADMIN_HOME/src/$OEBASE/"
        else
            if [ -d "`pwd`/$OEBASE" ] ; then
                OEBASE="`pwd`/$OEBASE"
            else
                if [ ! -d "$OEBASE" ] ; then
                    echo "STOPPING: source $OEBASE does not exist."
                    exit 1
                fi
            fi
        fi
        echo "Will use sources at $OEBASE"
    fi

    # Get optional port number    
    shift 1
    PORT="$1"
    if [ -z "$PORT" ] ; then
        PORT=8069
    fi
    
    #--------------------------------------------------
    # - create instance
    #--------------------------------------------------

    OE_DIR="$OEADMIN_HOME/$INSTANCE"
    
    # Create instance directory
    if [ ! -d "$OE_DIR/$BRANCHNAME" ] ; then
        echo "* Creating instance directory ..."
        mkdir -p "$OE_DIR/$BRANCHNAME"
    fi

    # Create symlink to server source
    if [ ! -z "$OEBASE" ] ; then
        if [ ! -d "$OEBASE" ] ; then
            echo "WARNING: $OEBASE not found."
            exit 1
        else
            echo "* Linking sources ..."
            # for DIRNAME in `cd $OEBASE && ls -d ./*/` ; do
            for DIRNAME in `ls -d "$OEBASE"/*/` ; do
                if [ ! -d "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`" ] ; then
                   if [ "`basename $DIRNAME`" = "web" ] ; then
                       echo -e "  $DIRNAME"addons #-> "$OE_DIR"/"$BRANCHNAME"/"$DIRNAME"
                       ln -s "$DIRNAME"addons "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`"
                   else
                       echo -e "  $DIRNAME" #-> "$OE_DIR"/"$BRANCHNAME"/"$DIRNAME"
                       ln -s "$DIRNAME" "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`"
                   fi
                fi
           done
        fi
    fi

    #create database
    if [ ! `psql $INSTANCE -tc "select 1" 2>/dev/null` ] ; then
        echo "* Creating instance database" "$BRANCHNAME"-"$INSTANCE" "..."
        createdb "$BRANCHNAME"-"$INSTANCE"
    fi

    #--------------------------------------------------
    # - create config
    #--------------------------------------------------
    # TODO: create - on user login, initial database is not the instance's db
    if [ ! -f "$OE_DIR/openerp-server.conf" ] ; then
        echo "* Creating instance config file ..."
        #TODO: better conf file (?)
        echo "[options]
; This is the password that allows database operations:
; admin_passwd = admin
db_user = $OEADMIN_USER
db_name = $INSTANCE
netrpc = False
xmlrpcs = False
log_handler = ['werkzeug:CRITICAL']
" > $OE_DIR/openerp-server.conf
    fi
    
    shift 1
    
    # TODO: create - add create database to start script
    if [ ! -f "$OE_DIR/$BRANCHNAME/start" ] ; then
        echo "# start server script
INSTANCEPATH=\$(cd \`dirname \$0\` && pwd) 
ADDONSPATH=\"\`ls -d1 \$INSTANCEPATH/*/ | grep -v '/server/$' | awk -vORS=, '{print \$1}' | sed 's/\/,/,/g' | sed 's/,\$//g'\`\"
if [ ! -z \"\$ADDONSPATH\" ] ; then 
  \$INSTANCEPATH/server/openerp-server --xmlrpc-port=$PORT --addons-path=\"\$ADDONSPATH\" $* \$*
else
  \$INSTANCEPATH/server/openerp-server --xmlrpc-port=$PORT $* \$*
fi" > "$OE_DIR/$BRANCHNAME/start"
        chmod ug+x "$OE_DIR/$BRANCHNAME/start"
    fi

    #--------------------------------------------------
    # - DONE with instance
    #--------------------------------------------------
    echo "
Instance \"$INSTANCE\" created configured for port $PORT.
To start it type: $OE_DIR/$BRANCHNAME/start
To use it browse: http://`hostname`:$PORT
"
   ;;


   
# TODO: branch - add copy/branch feature (?)
# TODO: install-all - add install all modules feature
install-all)
    echo "NOT IMPLEMENTED"
    exit 1
    #--------------------------------------------------
    if [ -z "$4" ] ; then
        echo "usage: oetor install INSTANCE BRANCHNAME"
        echo "Install all modules for an instance branch."
        exit 0
    fi
    #--------------------------------------------------
 
    # Get parameters
    INSTANCE="$2"
    BRANCHNAME="$3"
    
    echo -e "Branch contents:"
    ls "$OEADMIN_HOME/$INSTANCE/$BRANCHNAME"
    
    # Init modules
    echo -e "\nInstalling branch modules ..."
    MODULES="`ls -d1 $OEADMIN_HOME/$INSTANCE/$BRANCHNAME/*/ | xargs -I file basename file | tr '\n' ','`"
    echo "Modules to install: ${MODULES%?}" # remove trailing comma
    $0 start $INSTANCE $BRANCHNAME --init="${MODULES%?}" --stop-after-init
    ;;    


test)
    # TODO: test - add test feature
    echo "NOT IMPLEMENTED"
    exit 1
    # Get parameters
    INSTANCE="$2"
    BRANCH_NAME="$3"
    DBNAME="$BRANCH_NAME-$INSTANCE-TEST"
    dropdb $DBNAME
    createdb $DBNAME
    shift 1 
    $0 start $* -d $DBNAME --test-enable --stop-after-init
    # TODO: test command - fix double params
    ;;


remove)
    # TODO: remove - review remove feature
    echo "Sorry, the self-destruct button is currently disabled. To go ahead run:
rm -r $OEADMIN_HOME/INSTANCE
dropdb INSTANCE-VERSION"
    ;;


quickstart)
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor quickstart <installdir>
Installs OpenERP-inator and performs an automatic full installation of an
initial OpenERP instance. Requires sudo privilige to perform the system 
installation steps.
If no specific installation directory is provided, '/opt/openerp' will be used.

Equivalent to:
    ./oetor install
    /opt/openerp/oetor get-dependencies
    /opt/openerp/oetor get-nightly 7.0
    /opt/openerp/oetor create v7 nightly-7.0
"
    fi

    if [ ! -z "$2" ] ; then
        OEADMIN_HOME="$2"
    fi
    OEDIR="`echo $OEDIR | sed 's/\/$//'`"  # remove trailing slash
 
    $0 --at "$OEADMIN_HOME" install $2
    $0 get-dependencies 
    $0 --at "$OEADMIN_HOME" get nightly-7.0 
    $0 --at "$OEADMIN_HOME" create v7 nightly-7.0
    ;;


*)
    if [ -z "$1" ] ; then
        echo "usage: oetor <command> [<args>]"
    else
        echo "Not a valid command."
    fi
    echo "Type \`oetor --help\` to show all commands available."
    ;;


esac
