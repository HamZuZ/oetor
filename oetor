#!/bin/bash
################################################################################
# OpenERP-inator, a tool to manage OpenERP server instances
# Author: Daniel Reis, 2013
#
################################################################################

#fixed parameters:
VERSION="0.2"
OEVERSION="7.0"
OEADMIN_USER="`whoami`"
OEADMIN_HOME="/opt/openerp"
color='\e[1;34m'
endColor='\e[0m'

# Basic usage instruction
if [ -z "$1" ]; then
    echo "usage: oetor <command> [<args>]

The most commonly used commands are:
  help              Show all commands and detailed usage instructions.
  get-dependencies  Install PostgreSQL and OpenERP system dependencies.
  init              Initialize a OpenERP home and it's server sources.
  create            Create an OpenERP server instance.
  start             Start running a server instance.
  test              Create a temporay db and run tests for an instance

Type \`oetor help\` to show all commands available.
Type \`oetor <command>\` (with no argument) to get more help on a command.
"
    exit 0
fi

#OPTION=$1
case "$1" in


help)
  echo "usage: oetor <command> [<args>]
OpenERP-inator, a tool to manage and test multiple OpenERP server instances.
https://github.com/dreispt/oetor

<fluff> Dominate the entire ERP tri-state area by easilly installing and 
creating an army of OpenERP server instances in your server. Beware of the 
self-destruct button. </fluff>

For an easy and  quick start run: ./oetor auto-install
This will make an automatic full installation, including the creation of an
initial "demo" OpenERP instance. It's equivalent to running the sequence of
commands: get-dependencies; init; get-source; create demo.

Commands available:

  version           Display script's version info.
  get-dependencies  Install system dependencies including the PostgreSQL
                    database. Requires sudoer privilege.
  init [VERSION]    Creates db role for current user and the directory
                    structure. Requires sudoer privilege. VERSION is the
                    OpenERP version: 7.0 | trunk | 6.1.
  get-latest        Retrieves source code from nightly builds repository, into
                    the 'shared' directory.
  get-source        Retrieves source code from Lanchpad repositories, into
                    the 'shared' directory.
  update-source     Updates the sources with most recent versions.
  version-source    Displays the sources revision numbers.
  create NAME [PORT] [FIXED_OPTIONS]
                    Create an OpenERP 7 database and instance named "NAME" and
                    listening at port "PORT". If additional "FIXED_OPTIONS" are
                    provided, they will be included in the generated 'start'
                    script.
  start OEVERS NAME Starts this server instance.
  test OEVERS NAME  Creates a test database and runs tests for the instance.
  fake-smtp         Launch a test SMTP server on localhost, printing to stdout.

An OpenERP instance is a directory inside oetor's home directory. It can be
started running the `start` script and and includes a `openerp-server.conf`
configuration file used by the instance.

If the `start` script is provided with additional parameters, these will be
passed to the openerp-server.
For example: ./start.sh -u all --stop-after-init

The contained directories are automatically added to the addons_path upon server
start. By default includes symlinks to the official addons sources in the
'shared' directory.
"
    ;;


version)
    echo "oetor version: $VERSION"
    echo "oetor home: $OEADMIN_HOME"
    ;;


get-dependencies)
    #--------------------------------------------------
    # Install Postgres and System dependencies
    #  - tested with Ubuntu 12
    #--------------------------------------------------
    echo -e "\n---- Installing PostgreSQL ----"
    sudo apt-get install postgresql

    echo -e "\n---- Installing system packages ----"
    yes | sudo apt-get install bzr bzrtools python-pip git

    echo -e "\n---- Installing python packages ----"
    yes | sudo apt-get install python-dateutil python-docutils python-feedparser \
    python-gdata python-jinja2 python-ldap python-libxslt1 python-lxml python-mako \
    python-mock python-openid python-psycopg2 python-psutil python-pybabel \
    python-pychart python-pydot python-pyparsing python-reportlab python-simplejson \
    python-tz python-unittest2 python-vatnumber python-vobject python-webdav \
    python-werkzeug python-xlwt python-yaml python-zsi python-gdata

    #echo -e "\n---- Install python libraries ----"
    #sudo pip install gdata
    echo -e "Dependencies installed."
    ;;


init)
    #--------------------------------------------------
    # Setup directories
    #  - repo stored in /opt/openerp/<oeversion>
    #  - reexecution safe (nothing is done)
    #  - repo is a git clone: `git pull` will get it's latest version
    #--------------------------------------------------
    #oetor init [OEVERSION=7.0]
    if [ "$2" ] ; then
        OEVERSION="$2"
        shift 1
    else
        OEVERSION="7.0"
    fi

    if [ ! -d /var/log/openerp ] ; then
        echo -e "* Creating base log directory /var/log/openerp ..."
        sudo mkdir -p /var/log/openerp
        sudo chown $OEADMIN_USER:root /var/log/openerp
    fi
    if [ ! -d /var/log/openerp/$OEVERSION ] ; then
        echo -e "* Creating log directory /var/log/openerp/$OEVERSION ..."
        sudo mkdir -p /var/log/openerp/$OEVERSION
    fi

    if [ ! -d $OEADMIN_HOME ] ; then
        echo -e "* Creating oetor home directory $OEADMIN_HOME ..."
        sudo git clone https://github.com/dreispt/oetor $OEADMIN_HOME
        sudo chown -R $OEADMIN_USER:root $OEADMIN_HOME
    else
        echo -e "* Getting oetor latest version on directory $OEADMIN_HOME ..."
        git --git-dir=$OEADMIN_HOME pull
    fi

    OEADMIN_DIR="$OEADMIN_HOME/$OEVERSION"
    if [ ! -d $OEADMIN_DIR ] ; then
        echo -e "\n* Creating instance directory $OEADMIN_DIR ..."
        mkdir -p $OEADMIN_DIR
    fi

    $0 get-source $OEVERSION
    ;;


get-latest)
    #--------------------------------------------------
    # Download latest nightly build
    #
    #   Installed at $OEADMIN_HOME/VERSION/shared/latest
    #   If re-downloading, sources are replaced but referring symlinks are kept
    #--------------------------------------------------
    if [ "$2" ] ; then
        OEVERSION="$2"
        shift 1
    else
        OEVERSION="7.0"
    fi

    OEADMIN_DIR="$OEADMIN_HOME/$OEVERSION"
    echo "Retrieving nightly build sources to $OEADMIN_DIR/shared/latest:"
    echo -e "${color}* Downloading version 7 nightly build ...${endColor}"
    mkdir -p $OEADMIN_DIR/shared
    wget --no-clobber http://nightly.openerp.com/$OEVERSION/nightly/src/openerp-$OEVERSION-latest.tar.gz -P $OEADMIN_DIR/shared

    echo -e "${color}* Uncompressing files ...${endColor}"
    rm -rf $OEADMIN_DIR/shared/.tmp
    mkdir -p $OEADMIN_DIR/shared/.tmp
    tar xf $OEADMIN_DIR/shared/openerp-$OEVERSION-latest.tar.gz --directory=$OEADMIN_DIR/shared/.tmp

    echo -e "${color}* Installing shared source files ...${endColor}"
    rm -rf $OEADMIN_DIR/shared/latest/*
    mkdir -p $OEADMIN_DIR/shared/latest
    mv $OEADMIN_DIR/shared/.tmp/`ls $OEADMIN_DIR/shared/.tmp/`/* $OEADMIN_DIR/shared/latest/
    ;;


get-source)
    #--------------------------------------------------
    # Checkout sources from Launchpad
    #   using "https://launchpad.net/~openerp/..." instead of "lp:..." for anonymous download (to avoid asking pwd if an ssh key is set)
    #   using `checkout --lightweight` for fast download of shallow branches, but that are still updatable
    #--------------------------------------------------
    if [ "$2" ] ; then
        OEVERSION="$2"
        shift 1
    else
        OEVERSION="7.0"
    fi
    OEADMIN_DIR=$OEADMIN_HOME/$OEVERSION
    mkdir -p $OEADMIN_DIR/shared
    if [ ! -d $OEADMIN_DIR/shared/addons ] ; then
        echo -e "\n${color}Checkout of openerp-addons/$OEVERSION ...${endColor}"
        rm -rf $OEADMIN_DIR/shared/~tmp
        bzr checkout --lightweight https://launchpad.net/~openerp/openobject-addons/$OEVERSION $OEADMIN_DIR/shared/~tmp
        mv $OEADMIN_DIR/shared/~tmp $OEADMIN_DIR/shared/addons
    fi
    if [ ! -d $OEADMIN_DIR/shared/web ] ; then
        echo -e "\n${color}Checkout of openerp-web/$OEVERSION ...${endColor}"
        rm -rf $OEADMIN_DIR/shared/~tmp
        bzr checkout --lightweight https://launchpad.net/~openerp/openerp-web/$OEVERSION $OEADMIN_DIR/shared/~tmp
        mv $OEADMIN_DIR/shared/~tmp $OEADMIN_DIR/shared/web
    fi
    if [ ! -d $OEADMIN_DIR/shared/server ] ; then
        echo -e "\n${color}Checkout of openerp-server/$OEVERSION ...${endColor}"
        rm -rf $OEADMIN_DIR/shared/~tmp
        bzr checkout --lightweight https://launchpad.net/~openerp/openobject-server/$OEVERSION $OEADMIN_DIR/shared/~tmp
        mv $OEADMIN_DIR/shared/~tmp $OEADMIN_DIR/shared/server
    fi
    echo -e "\nLaunchpad sources ready."
    ;;


update-source)
    #--------------------------------------------------
    # Update the sources downloaded with "get-source"
    #--------------------------------------------------
    if [ "$2" ] ; then
        OEVERSION="$2"
        shift 1
    else
        OEVERSION="7.0"
    fi
    OEADMIN_DIR=$OEADMIN_HOME/$OEVERSION

    echo -e "Updating openerp-addons"
    bzr update $OEADMIN_DIR/shared/addons
    echo -e "* Updating openerp-web"
    bzr update $OEADMIN_DIR/shared/web
    echo -e "* Updating openerp-server"
    bzr update $OEADMIN_DIR/shared/server
    echo "Sources updated."
    ;;


version-source)
    #-------------------------------------------------
    # List version revision numbers for sources downloaded with "get-source"
    #--------------------------------------------------
    if [ "$2" ] ; then
        OEVERSION="$2"
        shift 1
    else
        OEVERSION="7.0"
    fi
    OEADMIN_DIR=$OEADMIN_HOME/$OEVERSION

    echo -e "* Shared sources revision numbers ($OEVERSION):"
    echo -en "server\t"
    bzr revno -q $OEADMIN_DIR/shared/server
    echo -en "addons\t"
    bzr revno -q $OEADMIN_DIR/shared/addons
    echo -en "web\t"
    bzr revno -q $OEADMIN_DIR/shared/web
    ;;


branch)
    #--------------------------------------------------
    # Create a new instance:
    #--------------------------------------------------
    # - process parameters
    #--------------------------------------------------

    # Check minimun parameters supplied
    if [ -z $4 ] ; then
        echo "Usage:
oetor create+branch VERSION INSTANCE <MPURL> <BRANCHNAME> [PORT] [FIXED_PARAMS]
oetor create+branch VERSION INSTANCE --no-branch [PORT] [FIXED_PARAMS]"
        exit 0
    fi

    #Get version and instance name
    OEVERSION=$2
    INSTANCE=$3
    OEADMIN_DIR=$OEADMIN_HOME/$OEVERSION
    
    #Get optional branch    
    if [ "$4" = "--no-branch" ] ; then
        MPURL=""
        BRANCHNAME=""
        shift 1
    else
        MPURL=$4
        BRANCHNAME=$5
        shift 2
    fi

    #Get optional port number    
    if [ -z $4 ] ; then
        PORT=8069
    else
        PORT=$4
        shift 1
    fi
    
    #--------------------------------------------------
    # - create instance
    #--------------------------------------------------

    # Create psql role if missing
    if [ -z `psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$OEADMIN_USER'"` ] ; then
        echo -e "* Creating database role $OEADMIN_USER ..."
        sudo su -c "createuser --createdb --no-createrole --no-superuser $OEADMIN_USER" postgres
    fi

    # Check server source available
    # TODO: allow user to choose the server source to use ...
    if [ -d $OEADMIN_DIR/shared/server ] ; then
        OESERVER="shared/server"
    else
        if  [ -d $OEADMIN_DIR/shared/latest ] ; then
            OESERVER="shared/latest"
        else
            echo "STOPPING: $OEADMIN_DIR/shared does not contain server sources."
            exit 0
        fi
    fi

    # Create instance directory
    if [ ! -d $OEADMIN_DIR/$INSTANCE/common ] ; then
        echo "* Creating instance directory ..."
        mkdir -p $OEADMIN_DIR/$INSTANCE/common
    fi

    # Create symlink to server source
    if [ ! -d $OEADMIN_DIR/$INSTANCE/server ] ; then
        echo "* Linking to server ..."
        ln -s $OEADMIN_DIR/$OESERVER $OEADMIN_DIR/$INSTANCE/server
    fi

    # Create symlink to addons and web source (if not using nightly build)
    # FIXME: does not check if shared addons and web exists
    if [ "$OESERVER" != "shared/server" ] ; then
        if [ ! -d $OEADMIN_DIR/$INSTANCE/common/addons ] ; then
            echo "* Linking to addons ..."
            ln -s $OEADMIN_DIR/shared/addons $OEADMIN_DIR/$INSTANCE/common/addons
        fi
        if [ -d $OEADMIN_DIR/$INSTANCE/common/web ] ; then
            echo "* Linking to web ..."
            ln -s $OEADMIN_DIR/shared/web/addons $OEADMIN_DIR/$INSTANCE/common/web
        fi
    fi

    if [ ! `psql $BRANCH_NAME-$INSTANCE-$OEVERSION -c "select 1"` == 0 ] ; then
        echo "* Creating instance database $INSTANCE-$OEVERSION ..."
        createdb "$INSTANCE-$OEVERSION"
    fi


    #--------------------------------------------------
    # - create config
    #--------------------------------------------------

    if [ ! -f "$OEADMIN_DIR/$INSTANCE/openerp-server.conf" ] ; then
        echo "* Creating instance config file ..."
        # TODO: better conf file (?)
        echo "[options]
; This is the password that allows database operations:
; admin_passwd = admin
db_user = $OEADMIN_USER
db_name = $INSTANCE-$OEVERSION
netrpc = False
xmlrpcs = False
log_handler = ['werkzeug:CRITICAL']
" > $OEADMIN_DIR/$INSTANCE/openerp-server.conf
    fi
    
    shift 3
    if [ ! -f "$OEADMIN_DIR/$INSTANCE/start.sh" ] ; then
        echo "* Creating instance start script ..."
        echo "#!/bin/sh
DIR=\"$OEADMIN_DIR/$INSTANCE\"
ADDONS=\"\`ls -dm \$DIR/common/*/|tr -d '[:space:]'\`\"
$OEADMIN_DIR/$INSTANCE/server/openerp-server --xmlrpc-port=$PORT $* --addons-path=\"\$ADDONS\" --config=\"\$DIR/openerp-server.conf\" \$*
" > $OEADMIN_DIR/$INSTANCE/start.sh
        chmod ug+x $OEADMIN_DIR/$INSTANCE/start.sh
    fi

    if [ ! -f "$OEADMIN_DIR/$INSTANCE/norm-$INSTANCE" ] ; then
        echo "$OEADMIN_DIR/oetor $OEVERSION $INSTANCE $*" > $OEADMIN_DIR/$INSTANCE/norm-$INSTANCE
        chmod ug+x "$OEADMIN_DIR/$INSTANCE/norm-$INSTANCE"
    fi

    #--------------------------------------------------
    # - DONE with instance
    #--------------------------------------------------
    echo "
Instance \"$INSTANCE\" created configured for port $PORT.
To start it type: $OEADMIN_DIR/$INSTANCE/start
To use it browse: http://`hostname`:$PORT
"

    #--------------------------------------------------
    # - create branch
    #--------------------------------------------------
    if [ -z "$MPURL"] ; then

        # Get MP sources
        if [ ! -d "$OEADMIN_DIR/$INSTANCE/$BRANCH_NAME" ] ; then
            echo "* Retrieving branch ..."
            bzr branch $MPURL $OEADMIN_DIR/$INSTANCE/$BRANCH_NAME
        fi
        
        if [ ! `psql $BRANCH_NAME-$INSTANCE-$OEVERSION -c "select 1"` == 0 ] ; then
            echo "* Creating database $BRANCH_NAME-$INSTANCE-$OEVERSION ..."
            createdb $BRANCH_NAME-$INSTANCE-$OEVERSION
        fi
    
        if [ ! -f "$OEADMIN_DIR/$INSTANCE/norm-$BRANCH_NAME" ] ; then
            # TODO: IMPORTANT - need to pass BRANCH_NAME to oetor!
            echo "$OEADMIN_DIR/oetor $OEVERSION $INSTANCE $*" > $OEADMIN_DIR/$INSTANCE/norm-$BRANCH_NAME
            chmod ug+x "$OEADMIN_DIR/$INSTANCE/norm-$BRANCH_NAME"
        fi

# TODO: IMPORTANT - move this logic into start command!
#        echo -e "* Creating branch start script ..."
#        echo "#!/bin/sh
#DIR=\"$OEADMIN_HOME/$OEVERSION/$INSTANCE\"
#ADDONS=\"\`ls -dm \$DIR/common/*/|tr -d '[:space:]'\`\"
#$OEADMIN_HOME/$OEVERSION/$OESERVER/openerp-server --xmlrpc-port=$PORT -d $BRANCH_NAME-$INSTANCE-$OEVERSION $* --addons-path=\"$OEADMIN_HOME/$OEVERSION/$INSTANCE/$BRANCH_NAME,\$ADDONS\" --config=\"\$DIR/openerp-server.conf\" \$*
#" > $OEADMIN_HOME/$OEVERSION/$INSTANCE/$BRANCH_NAME.sh
#        chmod ug+x $OEADMIN_HOME/$OEVERSION/$INSTANCE/$BRANCH_NAME.sh

        # Init modules
        #export MODULES="`ls -d1 $OEADMIN_HOME/$OEVERSION/$INSTANCE/$BRANCH_NAME/*/ | xargs -I file basename file | tr '\n' ','`"
        #echo "Branch module list:"
        #echo "$MODULES"
        #echo -e "\nStarting instance and installation of branch modules ..."
        #$0 start $OEVERSION $INSTANCE --init="$MODULES"

        #--------------------------------------------------
        # - DONE with branch
        #--------------------------------------------------
        echo "
Branch $BRANCH_NAME ready.
To control it:    $OEADMIN_DIR/$INSTANCE/norm-$BRANCH_NAME
"
    fi
    
    ;;


create)
    #--------------------------------------------------
    # Create a new instance:
    #   oetor create VERSION INSTANCE [PORT] [FIXED_PARAMS]
    #--------------------------------------------------

    # Check OpenERP version parameter
    if [ -z $2 ] ; then
        echo "Usage:   oetor create OEVERSION INSTANCE"
        echo "Example: oetor create 7.0 myserver"
        exit 0
    else
        # Get parameters
        OEVERSION="$2"
        INSTANCE="$3"
        shift 2
        $0 branch $OEVERSION $INSTANCE --no-branch $*
    fi
    ;;
    
#TODO; reviw install command, reuse branch command 
install)
    #--------------------------------------------------
    if [ -z "$5" ] ; then
        echo "usage: oetor install <version> <instance> <dirname> <lp url>
Retrieve a branch from Launchpad and install all its modules."
        exit 0
    fi
    #--------------------------------------------------
 
    # Get parameters
    OEVERSION="$2"
    INSTANCE="$3"
    DIRNAME="$4"
    MPURL="$5"
    
    # Get MP sources
    echo -e "Retrieving branch to $OEADMIN_HOME/$OEVERSION/$INSTANCE/$DIRNAME..."
    bzr branch $MPURL $OEADMIN_HOME/$OEVERSION/$INSTANCE/$DIRNAME
    echo -e "Branch contents:"
    ls $OEADMIN_HOME/$OEVERSION/$INSTANCE/$DIRNAME
    
    # Init modules
    echo -e "\nInstalling branch modules ..."
    export MODULES="`ls -d1 $OEADMIN_HOME/$OEVERSION/$INSTANCE/$DIRNAME/*/ | xargs -I file basename file | tr '\n' ','`"
    echo "Modules to install: ${MODULES%?}" # remove trailing comma
    $0 start $OEVERSION $INSTANCE --init="${MODULES%?}" --stop-after-init
    ;;
    


fake-smtp)
    sudo python -m smtpd -n -c DebuggingServer localhost:25
    ;;


start)
    #TODO: add get addons list logic
    OEVERSION=$2
    INSTANCE=$3
    shift 3
    $OEADMIN_HOME/$OEVERSION/$INSTANCE/start $*
    ;;


test)
    OEVERSION=$2
    INSTANCE=$3
    dropdb $INSTANCE-TEST-$OEVERSION
    createdb $INSTANCE-TEST-$OEVERSION
    shift 3
    $OEADMIN_HOME/$OEVERSION/$INSTANCE/start --test-enable --stop-after-init $*
    ;;


remove)
    echo "Sorry, the self-destruct button is currently disabled. To go ahead run:
rm -r $OEADMIN_HOME/VERSION/INSTANCE
dropdb INSTANCE-VERSION"
    ;;


auto-install)
    $0 get-dependencies
    $0 init
    $0 create 7.0 demo
    ;;

esac
